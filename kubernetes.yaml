apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: scrapyd-k8s
  name: scrapyd-k8s
spec:
  replicas: 3  # Increased the number of replicas
  selector:
    matchLabels:
      app.kubernetes.io/name: scrapyd-k8s
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scrapyd-k8s
    spec:
      imagePullSecrets:
      - name: regcred    
      serviceAccountName: scrapyd-k8s
      #Added anti-affinity rules to your deployment to ensure that pods are spread across different nodes.     
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - scrapyd-k8s
            topologyKey: "kubernetes.io/hostname"
      containers:
        - image: prathyushamogili729/scrapyd-test:v3
          imagePullPolicy: IfNotPresent
          name: scrapyd-k8s
          ports:
            - containerPort: 6800
              name: http
              protocol: TCP
          env:
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_DEPLOYMENT_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
          livenessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz
              port: http
          resources:
            limits:
              memory: 128Mi
              cpu: "500m"
            requests:
              memory: 64Mi
              cpu: "250m"
          volumeMounts:
            - name: scrapyd-k8s-config
              mountPath: /opt/app/scrapyd_k8s.conf
              readOnly: true
              subPath: scrapyd_k8s.conf
      volumes:
        - configMap:
            name: scrapyd-k8s-config
          name: scrapyd-k8s-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scrapyd-k8s-config
  labels:
    app.kubernetes.io/name: scrapyd-k8s
data:
  scrapyd_k8s.conf: |-
    [scrapyd]
    bind_address = 0.0.0.0
    http_port    = 6800

    repository   = scrapyd_k8s.repository.Remote
    launcher     = scrapyd_k8s.launcher.K8s

    namespace    = default

    [project.example]
    env_secret   = spider-example-env
    env_config   = spider-example-env
    repository   = ghcr.io/q-m/scrapyd-k8s-spider-example

    [default.resources]
    requests_cpu = 0.2
    requests_memory = 0.2G
    limits_cpu = 0.8
    limits_memory = 0.5G
---
apiVersion: v1
kind: Secret
metadata:
  name: spider-example-env
  labels:
    app.kubernetes.io/name: spider-example
stringData:
  FOO_API_KEY: "1234567890abcdef"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spider-example-env
  labels:
    app.kubernetes.io/name: spider-example
data:
  BAR_VALUE: "baz"
---
apiVersion: v1
kind: Service
metadata:
  name: scrapyd-k8s
  labels:
    app.kubernetes.io/name: scrapyd-k8s
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 6800
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: scrapyd-k8s
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scrapyd-k8s
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: scrapyd-k8s
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["get"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: scrapyd-k8s
subjects:
  - kind: ServiceAccount
    name: scrapyd-k8s
roleRef:
  kind: Role
  name: scrapyd-k8s
  apiGroup: rbac.authorization.k8s.io